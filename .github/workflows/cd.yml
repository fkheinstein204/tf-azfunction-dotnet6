name: 'ðŸš€ Continuous Delivery (CD)'

on:
  push:
    branches:
      - main
    paths:
      - 'src/Infra-Tf/**'
      - '.github/workflows/**'

env:
  TF_LOG: INFO
  TERRAFORM_WORKING_DIRECTORY: "src/Infra-Tf"
  DOTNET_WORKING_DIRECTORY: "src/dotnet/AzFnApplication"
  APPLICATION_NAME: "aztf-funcApp"
  ENVIRONMENT_NAME: "dev"
  DOTNET_VERSION: '8.0.x' # The .NET SDK version to use

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Test
        run: dotnet test --no-restore --verbosity normal --filter Category=Unit
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Publish
        run: dotnet publish **/AzFnApplication.csproj --configuration Release --output ./publish --no-restore
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name : Generate Deployment Package
        run: |
          cd publish
          zip -r deployment.zip .
        working-directory: ${{ env.DOTNET_WORKING_DIRECTORY }}

      - name: Upload Deployment Package
        uses: actions/upload-artifact@v4
        with:
          name: function-app
          path: ${{ env.DOTNET_WORKING_DIRECTORY }}/publish/deployment.zip

  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}

    steps:
     # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.0
          terraform_wrapper: false

      # Log into Azure with OIDC integration
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - id: apply
        name: Terraform Apply
        env:
          BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          BACKEND_STORAGE_CONTAINER_NAME: ${{ secrets.BACKEND_STORAGE_CONTAINER_NAME }}
          TF_VAR_application_name: ${{ env.APPLICATION_NAME }}
          TF_VAR_environment_name: ${{ env.ENVIRONMENT_NAME }}
          TF_BACKEND_KEY: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT_NAME }}.tfstate
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
            -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME" \
            -backend-config="key=$TF_BACKEND_KEY"

          terraform apply -auto-approve

      #- id: apply
      #  name: Terraform Apply
      #  working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
      #  run:  terraform apply -auto-approve